FILE: contractDescription.kt
    public? final? fun test_1(): R|kotlin/Unit|
        [Contract description] <
            contract#(<L> = contract@fun <implicit>.<anonymous>(): <implicit> {
                callsInPlace#()
            }
            )
        >
     {
        [StubStatement]
        test_1#()
    }
    public? final? fun test_2(): R|kotlin/Unit|
        [Contract description] <
            kotlin#.contracts#.contract#(<L> = contract@fun <implicit>.<anonymous>(): <implicit> {
                callsInPlace#()
                callsInPlace#()
            }
            )
        >
     {
        [StubStatement]
        test_2#()
    }
    public? final? var test_3: Int = IntegerLiteral(1)
        public? get(): Int
            [Contract description] <
                contract#(<L> = contract@fun <implicit>.<anonymous>(): <implicit> {
                    callsInPlace#()
                }
                )
            >
         {
            [StubStatement]
            ^ IntegerLiteral(1)
        }
        public? set(value: Int): R|kotlin/Unit|
            [Contract description] <
                kotlin#.contracts#.contract#(<L> = contract@fun <implicit>.<anonymous>(): <implicit> {
                    callsInPlace#()
                    callsInPlace#()
                }
                )
            >
         {
            [StubStatement]
        }
    public? final? fun test_4(): R|kotlin/Unit|
        [Contract description] <
            contract#()
        >
     {
        [StubStatement]
        test_4#()
    }
    public? final? fun test_5(): R|kotlin/Unit| {
        test_5#()
        contract#()
    }
    public? final? fun test_6(): R|kotlin/Unit| {
        aaa#.bbb#.ccc#.contract#(<L> = contract@fun <implicit>.<anonymous>(): <implicit> {
            ^@contract Unit
        }
        )
        test_6#()
    }
    public? final? fun test_7(): R|kotlin/Unit| {
        contracts#.contract#(<L> = contract@fun <implicit>.<anonymous>(): <implicit> {
            ^@contract Unit
        }
        )
        test_7#()
    }
    public? final? fun test_8(): R|kotlin/Unit| {
        aaa#.kotlin#.contracts#.contract#(<L> = contract@fun <implicit>.<anonymous>(): <implicit> {
            ^@contract Unit
        }
        )
        test_8#()
    }
    public? final? fun test9(s: MyClass?): R|kotlin/Unit|
        [Contract description] <
            returns#().implies#(!=(s#, Null(null))),
            someContract#(s#),
            returns#().implies#((s# is MySubClass))
        >
     {
        test_9#()
    }
    public? final? fun test10(): R|kotlin/Unit|
        [Contract description] <
            returnsNotNull#()
        >
     {
        test10#()
    }
    public? final? class MyClass : R|kotlin/Any| {
        public? constructor(): R|MyClass| {
            super<R|kotlin/Any|>()
        }

        public? final? var myInt: Int = IntegerLiteral(0)
            public? get(): Int
                [Contract description] <
                    returnsNotNull#()
                >
             {
                ^ IntegerLiteral(1)
            }
            public? set(value: Int): R|kotlin/Unit| {
                field# = value#.times#(IntegerLiteral(10))
            }

    }
    public? final? class AnotherClass : R|kotlin/Any| {
        public? constructor(multiplier: Int): R|AnotherClass| {
            super<R|kotlin/Any|>()
        }

        public? final? var anotherInt: Int = IntegerLiteral(0)
            public? get(): Int
                [Contract description] <
                    returnsNotNull#()
                >
             {
                ^ IntegerLiteral(1)
            }
            public? set(value: Int): R|kotlin/Unit|
                [Contract description] <
                    returns#()
                >
             {
                field# = value#.times#(multiplier#)
            }

    }
    public? final? class SomeClass : R|kotlin/Any| {
        public? constructor(multiplier: Int?): R|SomeClass| {
            super<R|kotlin/Any|>()
        }

        public? final? var someInt: Int = IntegerLiteral(0)
            public? get(): Int
                [Contract description] <
                    returnsNotNull#()
                >
             {
                ^ IntegerLiteral(1)
            }
            public? set(value: Int): R|kotlin/Unit|
                [Contract description] <
                    returns#().implies#(!=(value#, Null(null)))
                >
             {
                value# ?: throw NullArgumentException#()
                field# = value#
            }

    }
